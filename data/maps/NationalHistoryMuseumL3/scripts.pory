// ############### Mapscripts ###############

mapscripts NationalHistoryMuseumL3_MapScripts {
    MAP_SCRIPT_ON_RESUME: NHML3_OnResume
	//MAP_SCRIPT_ON_FRAME_TABLE [
		//VAR_TEMP_2, 0: NHML3_EveryFrame
	//]
}

script NHML3_OnResume {
	setvar(VAR_TEMP_2, 0) //var for EveryFrame

    //init player
	if(var(VAR_LITTLEROOT_TOWN_STATE) == 0) {
		givemon(SPECIES_MUNCHLAX, 11)
		setflag(FLAG_SYS_POKEMON_GET)
		setorcopyvar(VAR_LITTLEROOT_TOWN_STATE, 1)
		special(CreateMail)
		setflag(FLAG_RECEIVED_RUNNING_SHOES)
		setflag(FLAG_SYS_B_DASH)
		//set all badges so Pokemon will always obey
		setflag(FLAG_BADGE01_GET)
		setflag(FLAG_BADGE02_GET)
		setflag(FLAG_BADGE03_GET)
		setflag(FLAG_BADGE04_GET)
		setflag(FLAG_BADGE05_GET)
		setflag(FLAG_BADGE06_GET)
		setflag(FLAG_BADGE07_GET)
		setflag(FLAG_BADGE08_GET)
		setflag(FLAG_SYS_POKEDEX_GET)
		setflag(FLAG_SYS_NATIONAL_DEX)
		special(EnableNationalPokedex)
		setrespawn(HEAL_LOCATION_NATIONAL_HISTORY_MUSEUM)
	}

	//call(load_HONOR_MODE)
	end
}

script NHML3_EveryFrame {
	if (flag(FLAG_P01_HONOR_MODE) && flag(FLAG_P01_LOAD_SAVEGAME)) {
		lock
		clearflag(FLAG_P01_LOAD_SAVEGAME)
		buffernumberstring(STR_VAR_1, VAR_P01_CALC)
		call(Common_EventScript_SaveGame)
		closemessage
		release
	}
	setvar(VAR_TEMP_2, 1)
}

script load_HONOR_MODE {
	//save game after loading when HONOR mode is active
	if (flag(FLAG_P01_HONOR_MODE) && flag(FLAG_P01_LOAD_SAVEGAME)) {
        addvar(VAR_P01_PENALTY, 1)
		setorcopyvar(VAR_P01_CALC, VAR_P01_PENALTY) //interim save of VAR_P01_PENALTY value
		multvar(VAR_P01_CALC, 15)
		setorcopyvar(VAR_0x8004, VAR_P01_CALC) //set special var for following special
		special(PlayTimeAddMin)
    }
}


// ############### Regular scripts ###############

script NHML3_Trigger_WarpL2 {
	lockall
    randomnr(3)
    setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT) //set var for fossil riddle
	setflag(FLAG_NHML2_RIDDLE_START)
	clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
	clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
	//comment for productive release
	//msgbox(format("THIS IS A PRELIMINARY TESTING VERSION\pPlease do not share outside the closed testing circle!"))
    //waitmessage
	
	warp(MAP_NATIONAL_HISTORY_MUSEUM_L2, 3, 3)
	releaseall
	end
}

script NHML3_Move_Tutor {
	lock
	faceplayer
	msgbox("I am the Move Tutor. \lI will teach your Pokemon moves for\nprecious Heart Scales. \pWhich move should I teach?")
	waitmessage
	setvar(VAR_TEMP_FRONTIER_TUTOR_ID, 0)
	setvar(VAR_0x8004, SCROLL_MULTI_BF_MOVE_TUTOR_1)
	setvar(VAR_0x8006, 0)
	special(ShowScrollableMultichoice)
	waitstate
	copyvar(VAR_TEMP_FRONTIER_TUTOR_SELECTION, VAR_RESULT)
	switch(var(VAR_RESULT)) {
		case 0: call(NHML3_Tutor_RolePlay)
		case 1: call(NHML3_Tutor_Endeavor)
		case 2: call(NHML3_Tutor_Substitute)
		case 3: call(NHML3_Exit)
		case MULTI_B_PRESSED: call(NHML3_Exit)
	}
	waitmessage
	release
	end
}

script NHML3_Tutor_RolePlay {
	if (defeated(TRAINER_NHM_BRANDON)) {
		setvar(VAR_0x8008, 1)
		setvar(VAR_0x8005, MOVE_ROLE_PLAY)
		call(NHML3_Tutor_ConfirmMoveSelection)
	}
	else {
		msgbox(format("Oh I am sorry.\pI don't have this move available right now.\lYou should come back later for it."))
		waitmessage
		special(CloseBattleFrontierTutorWindow)
		release
	}
	end
}

script NHML3_Tutor_Endeavor {
	setvar(VAR_0x8008, 1)
	setvar(VAR_0x8005, MOVE_ENDEAVOR)
	call(NHML3_Tutor_ConfirmMoveSelection)
	end
}

script NHML3_Tutor_Substitute {
	if (defeated(TRAINER_NHM_BRANDON)) {
		setvar(VAR_0x8008, 1)
		setvar(VAR_0x8005, MOVE_SUBSTITUTE)
		call(NHML3_Tutor_ConfirmMoveSelection)
	}
	else {
		msgbox(format("Oh I am sorry.\pI don't have this move available right now.\lYou should come back later for it."))
		waitmessage
		special(CloseBattleFrontierTutorWindow)
		release
	}
	end
}

script NHML3_Exit {
	special(CloseBattleFrontierTutorWindow)
	msgbox(format("Well, if you don't want to..."), MSGBOX_AUTOCLOSE)
	release
	end
}

script NHML3_Battle_Double {
    trainerbattle_double(TRAINER_NHM_DOUBLE, format("Do you like all these artifacts?\lWe always enjoyed exhibits outside of the NORMAL."), format("We should have trusted the prophecy on that old sarcophagus over there.\lIt even foretold the broken AC in the first floor!"), Text_NotEnoughMons)
	lockall
	if (!flag(FLAG_NHML3_RECEIVED_STRENGTH)) {
		msgbox(format("That was very impressive!\lYou are a very STRONG trainer.\lLet us give you this as a reward."), MSGBOX_AUTOCLOSE)
		waitmessage
		giveitem(ITEM_HM04)
		setflag(FLAG_NHML3_RECEIVED_STRENGTH)
	}
	else {
		msgbox(format("The AC in the lobby is running crazy.\lBe careful making it through there!"), MSGBOX_AUTOCLOSE)
		waitmessage
	}
	releaseall
	end
}

//VAR_0x8008 is the price
//VAR_TEMP_C is the scroll multichoice ID
//VAR_TEMP_FRONTIER_TUTOR_SELECTION is the move selection
//VAR_TEMP_FRONTIER_TUTOR_ID is which move tutor was spoken to
script NHML3_Tutor_ConfirmMoveSelection {
	special(BufferBattleFrontierTutorMoveName)
	buffernumberstring(STR_VAR_2, VAR_0x8008)
	msgbox(format("The move {STR_VAR_1}, is it?"))
	msgbox("That will be {STR_VAR_2} Heart Scale, okay?", MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		msgbox(format("Alright. Come back anytime you want."), MSGBOX_AUTOCLOSE)
		waitmessage
		special(CloseBattleFrontierTutorWindow)
		release
		end
	}
	checkitem(ITEM_HEART_SCALE)
	if (var(VAR_RESULT) == NO) {
		msgbox(format("Oh, you don't have any Heart Scales!\lDon't waste my time then!"), MSGBOX_AUTOCLOSE)
		waitmessage
		special(CloseBattleFrontierTutorWindow)
		release
		end
	}
	else {
		msgbox(BattleFrontier_Lounge7_Text_TeachMoveToWhichMon, MSGBOX_DEFAULT)
		fadescreen(FADE_TO_BLACK)
		special(CloseBattleFrontierTutorWindow)
		special(ChooseMonForMoveTutor)
		waitstate
		if(var(VAR_RESULT) == FALSE) {
			call(NHML3_Exit)
		}
		else {
			msgbox("Thanks for doing business with me.", MSGBOX_AUTOCLOSE)
			removeitem(ITEM_HEART_SCALE)
		}
	}
	waitmessage
	release
	end
}

script NHML3_Trader {
	if(!flag(FLAG_CAUGHT_ARCHEN)) {
		lock
		faceplayer
		msgbox(format("Ohhh you got a MUNCHLAX!!!\lI love it!\pI'd really like to trade Pokemon with a skilled trainer...\pSo you should consider coming back when you have a bigger party."), MSGBOX_AUTOCLOSE)
		waitmessage
		release
	}
	elif (!flag(FLAG_GOT_HEART_SCALE) || !flag(FLAG_GOT_SASH)) {
		lock
		faceplayer
		msgbox(format("Oh you got an Archen? Very cool!\pI think there's more to do for you though before trading your MUNCHLAX.\lPlease come back later."), MSGBOX_AUTOCLOSE)
		waitmessage
		release
	}
	else {
		call(FortreeCity_House1_EventScript_Trader)
	}
	end
}

//no longer used
script NHML3_Trader2 {
	if(!flag(FLAG_CAUGHT_ARCHEN)) {
		lock
		faceplayer
		msgbox(format("Oh hey, I'd really like to trade Pokemon with a skilled trainer...\pSo you should consider coming back when you have a bigger party."), MSGBOX_AUTOCLOSE)
		waitmessage
		release
	}
	else {
		call(FortreeCity_House1_EventScript_Trader2)
	}
	end
}

script NHML3_ItemManager {
	lock
	faceplayer
	msgbox(format("Hello {PLAYER}, I am the collector!\pI will help you out in case you lost crucial items after obtaining them in the first place."), MSGBOX_AUTOCLOSE)
	waitmessage

	setorcopyvar(VAR_NHML3_COLLECTOR_COUNT, 0)
	clearflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
	//check sash
	if (flag(FLAG_GOT_SASH)) {
		checkitem(ITEM_FOCUS_SASH)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpcitem(ITEM_FOCUS_SASH)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpartyitem(ITEM_FOCUS_SASH)
		if (var(VAR_RESULT) < 6) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		//also check for held items in PC boxes
		setorcopyvar(VAR_TEMP_1, ITEM_FOCUS_SASH)
		specialvar(VAR_RESULT, ItemisHeldInPC)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}

		if (flag(FLAG_COLLECTOR_DONT_GIVE_ITEM)) {
			//msgbox(format("You are still owning a FOCUS SASH."), MSGBOX_AUTOCLOSE)
			//waitmessage
		}
		else {
			if (!defeated(TRAINER_NHM_BRANDON)) {
				msgbox(format("Oh no, you lost a FOCUS SASH!"), MSGBOX_AUTOCLOSE)
				waitmessage
				msgbox(format("Here, I will give you another one to continue your journey."), MSGBOX_AUTOCLOSE)
				waitmessage
				giveitem(ITEM_FOCUS_SASH)
				setflag(FLAG_HOLD_NO_SASH)
			}
		}
	}
	else {
		//msgbox(format("You never owned a FOCUS SASH!"), MSGBOX_AUTOCLOSE)
		//waitmessage
	}

	clearflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
	//check heart scale
	if (flag(FLAG_GOT_HEART_SCALE)) {
		checkitem(ITEM_HEART_SCALE)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpcitem(ITEM_HEART_SCALE)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpartyitem(ITEM_HEART_SCALE)
		if (var(VAR_RESULT) < 6) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		//also check for held items in PC boxes
		setorcopyvar(VAR_TEMP_1, ITEM_HEART_SCALE)
		specialvar(VAR_RESULT, ItemisHeldInPC)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}

		if (flag(FLAG_COLLECTOR_DONT_GIVE_ITEM)) {
			//msgbox(format("You are still owning a HEART SCALE."), MSGBOX_AUTOCLOSE)
			//waitmessage
		}
		else {
			//check requirements
			if(defeated(TRAINER_NHM_BRANDON) && !defeated(TRAINER_NHM_DOUBLE) && flag(FLAG_NHML2_ITEMBALL)) {
				checkpartymonmove(SPECIES_YAMASK, MOVE_ROLE_PLAY)
				if (var(VAR_RESULT) == FALSE) {
					addvar(VAR_NHML3_COLLECTOR_COUNT, 1)
				}
				checkpartymonmove(SPECIES_YAMASK, MOVE_SUBSTITUTE)
				if (var(VAR_RESULT) == FALSE) {
					addvar(VAR_NHML3_COLLECTOR_COUNT, 1)
				}
				//give items
				if (var(VAR_NHML3_COLLECTOR_COUNT) > 0)	{
					msgbox(format("Oh no, you no longer possess any HEART SCALES!"), MSGBOX_AUTOCLOSE)
					waitmessage

					switch (var(VAR_NHML3_COLLECTOR_COUNT)) {
						case 1:
							msgbox(format("Here, I will give you another one to continue your journey."), MSGBOX_AUTOCLOSE)
							waitmessage
							giveitem(ITEM_HEART_SCALE)
						case 2:
							msgbox(format("Here, I will give you two more to continue your journey."), MSGBOX_AUTOCLOSE)
							waitmessage
							giveitem(ITEM_HEART_SCALE, 2)
					}
				}
			}
		}
	}
	else {
		//msgbox(format("You never owned a HEART SCALE!"), MSGBOX_AUTOCLOSE)
		//waitmessage
	}

	clearflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
	//check Pokéball
	if(!flag(FLAG_CAUGHT_ARCHEN)) {
		checkitem(ITEM_POKE_BALL)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpcitem(ITEM_POKE_BALL)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpartyitem(ITEM_POKE_BALL)
		if (var(VAR_RESULT) < 6) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		//also check for held items in PC boxes
		setorcopyvar(VAR_TEMP_1, ITEM_POKE_BALL)
		specialvar(VAR_RESULT, ItemisHeldInPC)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}

		if (flag(FLAG_COLLECTOR_DONT_GIVE_ITEM)) {
			//msgbox(format("You are still owning a POKéBALL."), MSGBOX_AUTOCLOSE)
			//waitmessage
		}
		else {
			msgbox(format("Oh no, you lost your POKéBALL!"), MSGBOX_AUTOCLOSE)
			waitmessage
			msgbox(format("Here, I will give you another one!\lBut make sure to use it wisely."), MSGBOX_AUTOCLOSE)
			waitmessage
			giveitem(ITEM_POKE_BALL, 1)
		}
	}

	clearflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
	//check lagging tail
	if (flag(FLAG_GOT_LAGGING_TAIL)) {
		checkitem(ITEM_LAGGING_TAIL)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpcitem(ITEM_LAGGING_TAIL)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		checkpartyitem(ITEM_LAGGING_TAIL)
		if (var(VAR_RESULT) < 6) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}
		//also check for held items in PC boxes
		setorcopyvar(VAR_TEMP_1, ITEM_LAGGING_TAIL)
		specialvar(VAR_RESULT, ItemisHeldInPC)
		if (var(VAR_RESULT) == TRUE) {
			setflag(FLAG_COLLECTOR_DONT_GIVE_ITEM)
		}

		if (flag(FLAG_COLLECTOR_DONT_GIVE_ITEM)) {
			//msgbox(format("You are still owning a LAGGING TAIL."), MSGBOX_AUTOCLOSE)
			//waitmessage
		}
		else {
			if (!defeated(TRAINER_NHM_HAIL)) {
				msgbox(format("Oh no, you lost your LAGGING TAIL!"), MSGBOX_AUTOCLOSE)
				waitmessage
				msgbox(format("Here, I will give you another one to continue your journey."), MSGBOX_AUTOCLOSE)
				waitmessage
				giveitem(ITEM_LAGGING_TAIL)
			}
		}
	}
	else {
		//msgbox(format("You never owned a FOCUS SASH!"), MSGBOX_AUTOCLOSE)
		//waitmessage
	}
	release
}

script NHML3_InfoSign {
	lockall
    msgbox(format("IMPORTANT INFORMATION: \p1.) This game is featuring the most recent move learnsets for any Pokemon you control yourself. \p2.) It is not required to grind multiple levels to win any of the fights. \p3.) The game mechanics are basically vanilla.\lHowever, some base stats, item tables, etc. might have been slightly altered to balance the game. \p4.) Running from trainer battles is explicitly allowed."))
    waitmessage
    releaseall
    end
}

script NHML3_Sign_Stakataka {
	lock
	showmonpic(SPECIES_STAKATAKA, 10, 3)
	msgbox(format("STAKATAKA...very slow"))
	waitmessage
	hidemonpic
	release
	end
}

script NHML3_Sign_Persian {
	lock
	showmonpic(SPECIES_PERSIAN, 10, 3)
	msgbox(format("PERSIAN...very fast"))
	waitmessage
	hidemonpic
	release
	end
}

script NHML3_Sign_Cofagrigus {
	lock
	showmonpic(SPECIES_COFAGRIGUS, 10, 3)
	msgbox(format("COFAGRIGUS...very scary"))
	waitmessage
	hidemonpic
	release
	end
}

script NHML3_Sign_Regirock {
	lock
	showmonpic(SPECIES_REGIROCK, 10, 3)
	msgbox(format("REGIROCK...very reckless"))
	waitmessage
	hidemonpic
	release
	end
}

script NHML3_Sign_tileset {
	lock
    msgbox(format("Parts of this tileset have originally been designed by princess-phoenix and aveontrainer."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHML3_Sign_Pyramid {
	lock
    msgbox(format("A very realistic replica of an ancient Pyramid."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHML3_Sign_Pokedex {
	lock
    msgbox(format("It's the first ever found evidence of a Pokédex in history picturing a legendary and sacred Pokémon."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

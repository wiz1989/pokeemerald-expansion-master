// ############### Mapscripts ###############

mapscripts TARC_SEA_MapScripts {
    MAP_SCRIPT_ON_RESUME: TARC_Sea_OnResume
    MAP_SCRIPT_ON_TRANSITION: TARC_Sea_OnTransition
    MAP_SCRIPT_ON_FRAME_TABLE [
        VAR_LITTLEROOT_TOWN_STATE, 1: TARC_Sea_EveryFrame_GameStart
	]
}

script TARC_Sea_OnResume {
	//setvar(VAR_TEMP_2, 0) //var for EveryFrame

    //init player
	if(var(VAR_LITTLEROOT_TOWN_STATE) == 0) {
        setorcopyvar(VAR_LITTLEROOT_TOWN_STATE, 1)
        //Pokemon
		givemon(SPECIES_MANTYKE, 10, ITEM_NONE, 0, NATURE_LONELY, 0,0,0,0,0,0,0,0,0,31,0,0,0,0, MOVE_TACKLE, MOVE_WING_ATTACK, MOVE_WATER_GUN, MOVE_SURF)
        givemon(SPECIES_SABLEYE, 10, ITEM_LIFE_ORB, 0, NATURE_BRAVE, 2,0,0,0,0,0,0,0,0,0,0,0,0,20, MOVE_SCRATCH, MOVE_FLING, MOVE_PROTECT, MOVE_DISABLE)
        setflag(FLAG_SYS_POKEMON_GET)
        //Running Shoes
		setflag(FLAG_RECEIVED_RUNNING_SHOES)
		setflag(FLAG_SYS_B_DASH)
		//set all badges so Pokemon will always obey
		setflag(FLAG_BADGE01_GET)
		setflag(FLAG_BADGE02_GET)
		setflag(FLAG_BADGE03_GET)
		setflag(FLAG_BADGE04_GET)
		setflag(FLAG_BADGE05_GET)
		setflag(FLAG_BADGE06_GET)
		setflag(FLAG_BADGE07_GET)
		setflag(FLAG_BADGE08_GET)
        //enable Pokedex
		setflag(FLAG_SYS_POKEDEX_GET)
		setflag(FLAG_SYS_NATIONAL_DEX)
		special(EnableNationalPokedex)
        callnative(SetAllDexFlagsSeen)
	}
}

script TARC_Sea_OnTransition {
    setrespawn(HEAL_LOCATION_TARC_ISLAND)
}

script TARC_Sea_EveryFrame_GameStart {
    //new game movement
    lock
    setorcopyvar(VAR_LITTLEROOT_TOWN_STATE, 2)
    applymovement(OBJ_EVENT_ID_PLAYER, Move_driftintocurrents)
    waitmovement(0)
	msgbox(format("This is a preliminary Alpha Testing Version of this hack.\pPlease do not share it outside of the closed testing circle."))
    waitmessage
    release
}


// ############### Regular EventScripts ###############

script TARC_SEA_GameEnd {
	lock
	//fadescreen(FADE_TO_BLACK)
	special(StopPlayTimer)
	//get time
	specialvar(VAR_RESULT, GetPlayTimeHours)
	buffernumberstring(STR_VAR_1, VAR_RESULT)
	specialvar(VAR_RESULT, GetPlayTimeMinutes)
	buffertimestring(STR_VAR_2, VAR_RESULT)
	specialvar(VAR_RESULT, GetPlayTimeSeconds)
	buffertimestring(STR_VAR_3, VAR_RESULT)
	msgbox(format("Congratulations {PLAYER}! \pYou have completed the challenge. Well done! \pYour final time is {STR_VAR_1}:{STR_VAR_2}:{STR_VAR_3}."))
	waitmessage

	//get hints count
	setorcopyvar(VAR_TARC_COUNT, 0)
	if (flag(FLAG_HINT01)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT02)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT03)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT04)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT05)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT06)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT07)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT08)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT09)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT10)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT11)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT12)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT13)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT14)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT15)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT16)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT17)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT18)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT19)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	if (flag(FLAG_HINT20)) {
		addvar(VAR_TARC_COUNT, 1)
	}
	buffernumberstring(STR_VAR_1, VAR_TARC_COUNT)
	msgbox(format("You have been using {STR_VAR_1} hint(s)."))
	waitmessage
	//fadescreen(FADE_FROM_BLACK)
	//fadescreen(FADE_TO_BLACK)

	//show game credits
	special(StartCredits)
}


// ############### movements ###############

movement Move_exclmark {
	emote_exclamation_mark
}

movement Move_driftintocurrents {
    face_left
    walk_left*5
    face_up
    walk_up*5
    face_left
    walk_left*2
    face_up
    walk_up*4
    face_left
    walk_left*3
    face_up
    walk_up*6
}

movement Move_AfterRelease {
    walk_up
}

movement Move_AfterCurrent {
    emote_exclamation_mark
    delay_4
    face_right
    delay_1
    face_left
    delay_1
    face_right
    delay_1
    face_left
    delay_1
}
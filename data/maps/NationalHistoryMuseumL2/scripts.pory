// ############### Mapscripts ###############

mapscripts NationalHistoryMuseumL2_MapScripts {
    MAP_SCRIPT_ON_TRANSITION: NHML2_OnTransition
    MAP_SCRIPT_ON_RESUME: NHML2_OnResume
	MAP_SCRIPT_ON_FRAME_TABLE [
		//VAR_TEMP_2, 0: NHML2_EveryFrame
        VAR_NHML1_BOULDER_FELL_DOWN, 1: NHML2_EveryFrame_Boulder
        VAR_NHML2_FIGHT_KABUTOPS, 1: NHML2_EveryFrame_Sash
	]
}

script NHML2_OnTransition {
    //handle STRENGTH boulder visibility
    if (!flag(FLAG_NHML2_SHOW_BOULDER)){
        setflag(FLAG_NHML2_BOULDER)
    }
}

script NHML2_OnResume {
	setvar(VAR_TEMP_2, 0) //var for EveryFrame
	call(load_HONOR_MODE)
    
	end
}

script NHML2_EveryFrame {
	if (flag(FLAG_P01_HONOR_MODE) && flag(FLAG_P01_LOAD_SAVEGAME)) {
		lock
		clearflag(FLAG_P01_LOAD_SAVEGAME)
		buffernumberstring(STR_VAR_1, VAR_P01_CALC)
		call(Common_EventScript_SaveGame)
		closemessage
		release
	}
	setvar(VAR_TEMP_2, 1)
}

script NHML2_EveryFrame_Boulder {
    call(NHML2_Boulder_in_hole)
    end
}

script NHML2_EveryFrame_Sash {
    setorcopyvar(VAR_NHML2_FIGHT_KABUTOPS, 0)
    clearflag(FLAG_HOLD_NO_SASH)
    checkpartyitem(ITEM_FOCUS_SASH)
    if (var(VAR_RESULT) < 6) {
        //party has acquired focus sash
        setflag(FLAG_HOLD_NO_SASH)
        setflag(FLAG_GOT_SASH) //first acquired sash sets this flag to log play progress
    }
    checkitem(ITEM_FOCUS_SASH)
    if (var(VAR_RESULT) == TRUE) {
        //player has focus sash in bag
        setflag(FLAG_HOLD_NO_SASH)
        setflag(FLAG_GOT_SASH) //first acquired sash sets this flag to log play progress
    }
    checkpcitem(ITEM_FOCUS_SASH)
    if (var(VAR_RESULT) == TRUE) {
        //player has focus sash in PC
        setflag(FLAG_HOLD_NO_SASH)
        setflag(FLAG_GOT_SASH) //first acquired sash sets this flag to log play progress
    }
    end
}


// ############### Regular scripts ###############

script NHML2_Trigger_WarpL3 {
    lockall
    warp(MAP_NATIONAL_HISTORY_MUSEUM_L3, 3, 3)
	releaseall
	end
}

script NHML2_Trigger_WarpL1 {
    lockall
    warp(MAP_NATIONAL_HISTORY_MUSEUM_L1, 27, 3)
    setflag(FLAG_MOVE_BACK) //set flag to handle the hiker movement
    releaseall
	end
}

script NHML2_PC {
    call(EventScript_PC)
}

script NHML2_Nurse {
    lock
    faceplayer
    msgbox(format("Let me heal your party."), MSGBOX_AUTOCLOSE)
    call(Common_EventScript_OutOfCenterPartyHeal)
	incrementgamestat(GAME_STAT_RESTED_AT_HOME)
    msgbox(format("You're good to go again."), MSGBOX_AUTOCLOSE)
    release
    end
}

script NHML2_BlondeMan {
    lock
	faceplayer
    if(defeated(TRAINER_NHM_BRANDON)) {
        msgbox(format("YOU DID IT!\pI went down to leave but came back as it was too cold for my taste.\lLooks like their A/C has a malfunction or so."), MSGBOX_AUTOCLOSE)
    }
    else {
        msgbox(format("This guy over there won't let anybody out here until someone defeats him.\lWhat a jerk!"), MSGBOX_AUTOCLOSE)
        waitmessage
        if (flag(FLAG_CAUGHT_ARCHEN)) {
            checkpartymon(SPECIES_YAMASK)
            if (var(VAR_RESULT) == TRUE) {
                checkpartymove(MOVE_ENDEAVOR)
                if (var(VAR_RESULT) < PARTY_SIZE) {
                    msgbox(format("Wow...\n...you really look like you could have a good chance of winning."), MSGBOX_AUTOCLOSE)
                }
                else {
                    msgbox(format("Welp...looks like you're also not ready, yet."), MSGBOX_AUTOCLOSE)
                }
            }
            else {
                msgbox(format("Welp...looks like you're also not ready, yet."), MSGBOX_AUTOCLOSE)
            }
        }
        else {
            msgbox(format("You should consider getting more PokÃ©mon before challenging him."), MSGBOX_AUTOCLOSE)
        }
    }
    waitmessage
    release
    end
}

script NHML2_Battle_Brandon {
	trainerbattle_single(TRAINER_NHM_BRANDON, format("Don't think about fighting the couple on the third floor, if you can't even get past me!"), "I wasn't FEARful enough.")
	lock
	msgbox(format("The couple on floor 3 won't be as easy on you as I was.\pIf there only was a way to stop them from hitting you that hard!"), MSGBOX_AUTOCLOSE)
	release
    if (!flag(FLAG_MOVE_BACK)) {
        applymovement(1, Move_back)
        waitmovement(0)
        setobjectxy(1, 27, 11)
        setflag(FLAG_MOVE_BACK)
    }
	end
}

script NHM2_Battle_Archen {
    msgbox(format("The PLUME FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
    waitmessage
    playmoncry(SPECIES_ARCHEN, CRY_MODE_ENCOUNTER)
    delay(40)
    waitmoncry
    
    if(!defeated(TRAINER_NHM_BRANDON)) {
        setwildbattle(SPECIES_ARCHEN, 12)
    }
    else {
        setwildbattle(SPECIES_ARCHEOPS, 100)
    }
    dowildbattle
	end
}

script NHM2_Battle_Kabutops {
    //GRASS 2
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 0 && flag(FLAG_NHML2_RIDDLE_STEP1_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        if (flag(FLAG_NHML1_WALLPAPER_GUY)) {
            clearflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            setflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
            msgbox(format("There is a DOME FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        }
        else {
            msgbox(format("There is a DOME FOSSIL exhibited...\l...A hidden switch shows.\pBut it's stuck.\lYou should try that again later."), MSGBOX_AUTOCLOSE)
            randomnr(3)
            setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
            setflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        }
        waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The DOME FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        
        playmoncry(SPECIES_KABUTOPS, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry

        if(flag(FLAG_HOLD_NO_SASH) || defeated(TRAINER_NHM_BRANDON)) {
            setorcopyvar(VAR_NHML2_FIGHT_KABUTOPS, 1)
            setwildbattle(SPECIES_KABUTOPS, 100)
        }
        else {
            setorcopyvar(VAR_NHML2_FIGHT_KABUTOPS, 1)
            setwildbattle(SPECIES_KABUTOPS, 100, ITEM_FOCUS_SASH)
        }
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Omastar {
    //WATER 3
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 2 && flag(FLAG_NHML2_RIDDLE_STEP2_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        setflag(FLAG_NHML2_RIDDLE_SOLVED)
        setflag(FLAG_NHML2_SHOW_BOULDER)
        msgbox(format("There is a HELIX FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
        setvar(VAR_0x8004, 1)  //vertical pan
        setvar(VAR_0x8005, 1)  //horizontal pan
        setvar(VAR_0x8006, 4)  //num shakes
        setvar(VAR_0x8007, 5)  //shake delay
        special(ShakeCamera)
	    waitstate
        fadescreen(FADE_TO_BLACK)
        addobject(3, MAP_NATIONAL_HISTORY_MUSEUM_L2)
        fadescreen(FADE_FROM_BLACK)
        clearflag(FLAG_NHML2_BOULDER)
        applymovement(OBJ_EVENT_ID_PLAYER, Move_exclmark)
        waitmovement(0)
        msgbox(format("Something heavy fell from above!"))
	    waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The HELIX FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_OMASTAR, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_OMASTAR, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Aerodactyl {
    //FIRE 2
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 1 && flag(FLAG_NHML2_RIDDLE_STEP1_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        if (flag(FLAG_NHML1_WALLPAPER_GUY)) {
            clearflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            setflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
            msgbox(format("There is an OLD AMBER exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        }
        else {
            msgbox(format("There is an OLD AMBER exhibited...\l...A hidden switch shows.\pBut it's stuck.\lYou should try that again later."), MSGBOX_AUTOCLOSE)
            randomnr(3)
            setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
            setflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        }
        waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The OLD AMBER is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_AERODACTYL, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_AERODACTYL, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Cradily {
    //GRASS 3
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 0 && flag(FLAG_NHML2_RIDDLE_STEP2_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        setflag(FLAG_NHML2_RIDDLE_SOLVED)
        setflag(FLAG_NHML2_SHOW_BOULDER)
        msgbox(format("There is a ROOT FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
        setvar(VAR_0x8004, 1)  //vertical pan
        setvar(VAR_0x8005, 1)  //horizontal pan
        setvar(VAR_0x8006, 4)  //num shakes
        setvar(VAR_0x8007, 5)  //shake delay
        special(ShakeCamera)
	    waitstate
        fadescreen(FADE_TO_BLACK)
        addobject(3, MAP_NATIONAL_HISTORY_MUSEUM_L2)
        fadescreen(FADE_FROM_BLACK)
        clearflag(FLAG_NHML2_BOULDER)
        applymovement(OBJ_EVENT_ID_PLAYER, Move_exclmark)
        waitmovement(0)
        msgbox(format("Something heavy fell from above!"))
	    waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The ROOT FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_CRADILY, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_CRADILY, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Armaldo {
    //FIRE 3
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 1 && flag(FLAG_NHML2_RIDDLE_STEP2_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        setflag(FLAG_NHML2_RIDDLE_SOLVED)
        setflag(FLAG_NHML2_SHOW_BOULDER)
        msgbox(format("There is a CLAW FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
        setvar(VAR_0x8004, 1)  //vertical pan
        setvar(VAR_0x8005, 1)  //horizontal pan
        setvar(VAR_0x8006, 4)  //num shakes
        setvar(VAR_0x8007, 5)  //shake delay
        special(ShakeCamera)
	    waitstate
        fadescreen(FADE_TO_BLACK)
        addobject(3, MAP_NATIONAL_HISTORY_MUSEUM_L2)
        fadescreen(FADE_FROM_BLACK)
        clearflag(FLAG_NHML2_BOULDER)
        applymovement(OBJ_EVENT_ID_PLAYER, Move_exclmark)
        waitmovement(0)
        msgbox(format("Something heavy fell from above!"))
	    waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The CLAW FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_ARMALDO, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_ARMALDO, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Rampardos {
    //GRASS 1
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 0 && flag(FLAG_NHML2_RIDDLE_START) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        clearflag(FLAG_NHML2_RIDDLE_START)
        setflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        msgbox(format("There is a SKULL FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
    }
    else {
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        msgbox(format("The SKULL FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_RAMPARDOS, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_RAMPARDOS, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Bastiodon {
    //FIRE 1
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 1 && flag(FLAG_NHML2_RIDDLE_START) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        clearflag(FLAG_NHML2_RIDDLE_START)
        setflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        msgbox(format("There is a ARMOR FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
    }
    else {
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        msgbox(format("The ARMOR FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_BASTIODON, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_BASTIODON, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Carracosta {
    //WATER 2
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 2 && flag(FLAG_NHML2_RIDDLE_STEP1_CHECK) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        if (flag(FLAG_NHML1_WALLPAPER_GUY)) {
            clearflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            setflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
            msgbox(format("There is a COVER FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        }
        else {
            msgbox(format("There is a COVER FOSSIL exhibited...\l...A hidden switch shows.\pBut it's stuck.\lYou should try that again later."), MSGBOX_AUTOCLOSE)
            randomnr(3)
            setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
            setflag(FLAG_NHML2_RIDDLE_START)
            clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
            clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        }
        waitmessage
    }
    else {
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        msgbox(format("The COVER FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_CARRACOSTA, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_CARRACOSTA, 100)
        dowildbattle
    }
    release
	end
}

script NHM2_Battle_Aurorus {
    //WATER 1
    lock
    if (var(VAR_NHM_L2_RIDDLE) == 2 && flag(FLAG_NHML2_RIDDLE_START) && !flag(FLAG_NHML2_RIDDLE_SOLVED)) {
        clearflag(FLAG_NHML2_RIDDLE_START)
        setflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        msgbox(format("There is a SAIL FOSSIL exhibited...\l...A hidden switch clicked."), MSGBOX_AUTOCLOSE)
        waitmessage
    }
    else {
        setflag(FLAG_NHML2_RIDDLE_START)
        clearflag(FLAG_NHML2_RIDDLE_STEP1_CHECK)
        clearflag(FLAG_NHML2_RIDDLE_STEP2_CHECK)
        randomnr(3)
        setorcopyvar(VAR_NHM_L2_RIDDLE, VAR_RESULT)
        msgbox(format("The SAIL FOSSIL is glowing brightly.\pFeel its power!"), MSGBOX_AUTOCLOSE)
        waitmessage
        playmoncry(SPECIES_AURORUS, CRY_MODE_ENCOUNTER)
        delay(40)
        waitmoncry
        setwildbattle(SPECIES_AURORUS, 100)
        dowildbattle
    }
    release
	end
}

script NHML2_Camper {
    lock
	faceplayer
    switch (var(VAR_NHM_L2_RIDDLE)) {
        case 0:
             msgbox(format("Hey, there! What's your favorite TYPE? \pMine is GRASS."), MSGBOX_AUTOCLOSE)
        case 1:
             msgbox(format("Hey, there! What's your favorite TYPE? \pMine is FIRE."), MSGBOX_AUTOCLOSE)
        case 2:
             msgbox(format("Hey, there! What's your favorite TYPE? \pMine is WATER."), MSGBOX_AUTOCLOSE)
    }
    release
    end
}

script NHML2_Game_Master {
    lock
    clearflag(FLAG_P01_ADDTIME)
    clearflag(FLAG_P01_GIVE_ADVICE)
    faceplayer
    msgbox(format("I am the Game Master. \pI will give you helpful advice for each situation, but it adds an additional 20min to your play clock."))
    waitmessage
    msgbox(format("Do you want me to give you a hint?"), MSGBOX_YESNO)
    if (var(VAR_RESULT) == YES) {
        setflag(FLAG_P01_GIVE_ADVICE)
        
        //only give advice, if there are no PokÃ©mon in the PC
        specialvar(VAR_RESULT, IsPcEmpty)
        if(var(VAR_RESULT) == FALSE)  {
            msgbox(format("You still have PokÃ©mon in your PC. I can only give you tips when it's empty. \pOf course, you won't be charged 20 minutes this time."))
            clearflag(FLAG_P01_GIVE_ADVICE)
        }
        else {
            //handle all different scenarios below

            //new initial hint for catching Archen
            checkitem(ITEM_POKE_BALL)
            if(!flag(FLAG_CAUGHT_ARCHEN) && var(VAR_RESULT) == TRUE) {
                if (!flag(FLAG_HINT17)) {
                    setflag(FLAG_HINT17)
                    setflag(FLAG_P01_ADDTIME)
                }
                msgbox(format("Looks like you haven't used your PokÃ©ball, yet.\pThere is one specific encounter here that is weak enough to catch it.\l...\l...did you have a closer look at that Bastiodon skull over there?"), MSGBOX_AUTOCLOSE)
                clearflag(FLAG_P01_GIVE_ADVICE)
            }

            //first battle not yet won - getting Sash and Heart Scale
            if (!defeated(TRAINER_NHM_BRANDON) && (!flag(FLAG_GOT_SASH) || !flag(FLAG_GOT_HEART_SCALE)) && flag(FLAG_CAUGHT_ARCHEN)) {
                checkpartymove(MOVE_COVET)
                if (var(VAR_RESULT) == PARTY_SIZE) {
                    //thirteenth hint: CHECK COVET not learned?
                    getpartymonlevel(SPECIES_MUNCHLAX)
                    if (var(VAR_RESULT) >= 12) {
                        if (!flag(FLAG_HINT13)) {
                            setflag(FLAG_HINT13)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("Oh no, your Munchlax didn't learn the move COVET when leveling up?\pLet me update its moveset so you can continue your journey..."), MSGBOX_AUTOCLOSE)
                        waitmessage

                        getpartymonslot(SPECIES_MUNCHLAX)
                        switch (var(VAR_RESULT)) {
                            case 0:
                                setmonmove(0, 0, MOVE_ICY_WIND)
                                setmonmove(0, 1, MOVE_TACKLE)
                                setmonmove(0, 2, MOVE_COVET)
                                setmonmove(0, 3, MOVE_RECYCLE)
                            case 1:
                                setmonmove(1, 0, MOVE_ICY_WIND)
                                setmonmove(1, 1, MOVE_TACKLE)
                                setmonmove(1, 2, MOVE_COVET)
                                setmonmove(1, 3, MOVE_RECYCLE)
                            case 2:
                                setmonmove(2, 0, MOVE_ICY_WIND)
                                setmonmove(2, 1, MOVE_TACKLE)
                                setmonmove(2, 2, MOVE_COVET)
                                setmonmove(2, 3, MOVE_RECYCLE)
                            case 3:
                                setmonmove(3, 0, MOVE_ICY_WIND)
                                setmonmove(3, 1, MOVE_TACKLE)
                                setmonmove(3, 2, MOVE_COVET)
                                setmonmove(3, 3, MOVE_RECYCLE)
                        }

                        msgbox(format("Munchlax' moveset has been updated."), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                    else {
                        //first hint: COVET
                        if (!flag(FLAG_HINT01)) {
                            setflag(FLAG_HINT01)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("Have you seen the mail in your PC?\pYou should check out Munchlax' learnset to see if it can help you solving that hint!"), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                }
                else {  
                    //twelfth hint: CHECK RECYCLE
                    if (!flag(FLAG_GOT_SASH)) {
                        checkpartymove(MOVE_RECYCLE)
                        if (var(VAR_RESULT) == PARTY_SIZE) {
                            if (!flag(FLAG_HINT12)) {
                                setflag(FLAG_HINT12)
                                setflag(FLAG_P01_ADDTIME)
                            }
                            msgbox(format("Oh no, your Munchlax forgot the move RECYCLE?\pLet me update its moveset so you can continue your journey..."), MSGBOX_AUTOCLOSE)
                            waitmessage
                            getpartymonslot(SPECIES_MUNCHLAX)
                            switch (var(VAR_RESULT)) {
                                case 0:
                                    setmonmove(0, 0, MOVE_ICY_WIND)
                                    setmonmove(0, 1, MOVE_TACKLE)
                                    setmonmove(0, 2, MOVE_COVET)
                                    setmonmove(0, 3, MOVE_RECYCLE)
                                case 1:
                                    setmonmove(1, 0, MOVE_ICY_WIND)
                                    setmonmove(1, 1, MOVE_TACKLE)
                                    setmonmove(1, 2, MOVE_COVET)
                                    setmonmove(1, 3, MOVE_RECYCLE)
                                case 2:
                                    setmonmove(2, 0, MOVE_ICY_WIND)
                                    setmonmove(2, 1, MOVE_TACKLE)
                                    setmonmove(2, 2, MOVE_COVET)
                                    setmonmove(2, 3, MOVE_RECYCLE)
                                case 3:
                                    setmonmove(3, 0, MOVE_ICY_WIND)
                                    setmonmove(3, 1, MOVE_TACKLE)
                                    setmonmove(3, 2, MOVE_COVET)
                                    setmonmove(3, 3, MOVE_RECYCLE)
                            }
                            
                            msgbox(format("Munchlax' moveset has been updated."), MSGBOX_AUTOCLOSE)
                            clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                        else {
                            //second hint: FOCUS SASH
                            if (!flag(FLAG_HINT02)) {
                                setflag(FLAG_HINT02)
                                setflag(FLAG_P01_ADDTIME)
                            }
                            msgbox(format("People are making so much trash.\pWe should all try to RECYCLE more!\lEven when trying to obtain a FOCUS SASH."), MSGBOX_AUTOCLOSE)
                            clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                    }
                    else {
                        //third hint: Heart Scale
                        if (!flag(FLAG_GOT_HEART_SCALE)) {
                            if (!flag(FLAG_HINT03)) {
                                setflag(FLAG_HINT03)
                                setflag(FLAG_P01_ADDTIME)
                            }
                            msgbox(format("I heard HEART SCALES can be found after some battles.\pYour Munchlax is key to obtain them."), MSGBOX_AUTOCLOSE)
                            clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                    }
                }
            }
            //first battle not yet won - winning first battle
            if (!defeated(TRAINER_NHM_BRANDON) && flag(FLAG_GOT_SASH) && flag(FLAG_GOT_HEART_SCALE)) {
                //fourteenth hin: return POKEBALL
                if(!flag(FLAG_CAUGHT_ARCHEN)) {
                    //checkitem(ITEM_POKE_BALL)
                    //if(var(VAR_RESULT) == FALSE) {
                        //if (!flag(FLAG_HINT14)) {
                            //setflag(FLAG_HINT14)
                            //setflag(FLAG_P01_ADDTIME)
                        //}
                        //msgbox(format("You lost your PokÃ©ball?\pLet me give you another one!\lBut make sure to only use it on Archen since everything else is impossible to catch."), MSGBOX_AUTOCLOSE)
                        //giveitem(ITEM_POKE_BALL, 1)
                        //clearflag(FLAG_P01_GIVE_ADVICE)
                    //}
                    //else {
                    //fifteenth hint: catch ARCHEN
                    if (!flag(FLAG_HINT15)) {
                        setflag(FLAG_HINT15)
                        setflag(FLAG_P01_ADDTIME)
                    }
                    msgbox(format("Looks like you haven't used your PokÃ©ball, yet.\pThere is one specific encounter here that is weak enough to catch it.\lYou should look out for it and make it a member of your team."), MSGBOX_AUTOCLOSE)
                    clearflag(FLAG_P01_GIVE_ADVICE)
                    //}
                }
                else {
                    //fourth hint: trade Yamask
                    checkpartymon(SPECIES_YAMASK)
                    if (var(VAR_RESULT) == FALSE) {
                        if (!flag(FLAG_HINT04)) {
                            setflag(FLAG_HINT04)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("You are struggling to defeat that trainer on the right?\pLet me tell you that you won't defeat him with Munchlax in your party!"), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                    else {
                        //fifth hint: get Endeavor
                        checkpartymove(MOVE_ENDEAVOR)
                        if (var(VAR_RESULT) == PARTY_SIZE) {
                            if (!flag(FLAG_HINT05)) {
                                setflag(FLAG_HINT05)
                                setflag(FLAG_P01_ADDTIME)
                            }
                            msgbox(format("There's only one way to defeat the trainer on the right and it leads you to the Move Tutor upstairs."), MSGBOX_AUTOCLOSE)
                            clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                        else {
                            //sixth hint: win the first battle
                            if (!flag(FLAG_HINT06)) {
                                    setflag(FLAG_HINT06)
                                    setflag(FLAG_P01_ADDTIME)
                                }
                                msgbox(format("You are struggling to defeat that Tyrantrum?\pYou should take a closer look at Yamask's ability."), MSGBOX_AUTOCLOSE)
                                clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                    }
                }
            }
            //first battle won
            if (defeated(TRAINER_NHM_BRANDON) && !defeated(TRAINER_NHM_DOUBLE)) {
                if (!flag(FLAG_NHML2_RIDDLE_SOLVED)) {
                    //seventh hint: fossil riddle
                    if (flag(FLAG_NHML1_WALLPAPER_GUY)) {
                        if (!flag(FLAG_HINT07)) {
                            setflag(FLAG_HINT07)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("You spoke to the gentleman talking about the wallpapers here, haven't you?\pYou should think about how and where you can take a specific look at WALLPAPERS."), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                }
                else {
                    checkpartymon(SPECIES_CLEFAIRY)
                    copyvar(VAR_RESULT2, VAR_RESULT)
                    checkpartymon(SPECIES_SKITTY)
                    if (var(VAR_RESULT) == TRUE && var(VAR_RESULT2) == TRUE) {
                        //eigth hint: Move Tutor
                        checkpartymove(MOVE_ROLE_PLAY)
                        if (var(VAR_RESULT) == PARTY_SIZE) {
                            if (!flag(FLAG_HINT08)) {
                                setflag(FLAG_HINT08)
                                setflag(FLAG_P01_ADDTIME)
                            }
                            msgbox(format("You should go visit the Move Tutor again.\pWithout his excellent service you won't be able to proceed."), MSGBOX_AUTOCLOSE)
                            clearflag(FLAG_P01_GIVE_ADVICE)
                        }
                        else {
                            checkpartymonmove(SPECIES_YAMASK, MOVE_SUBSTITUTE)
                            if (var(VAR_RESULT) == FALSE) {
                                if (!flag(FLAG_HINT08)) {
                                    setflag(FLAG_HINT08)
                                    setflag(FLAG_P01_ADDTIME)
                                }
                                msgbox(format("You should go visit the Move Tutor again.\pWithout his excellent service you won't be able to proceed."), MSGBOX_AUTOCLOSE)
                                clearflag(FLAG_P01_GIVE_ADVICE)
                            }
                            else {
                                //ninth hint: second battle
                                if (!flag(FLAG_HINT09)) {
                                    setflag(FLAG_HINT09)
                                    setflag(FLAG_P01_ADDTIME)
                                }
                                msgbox(format("To continue you will have to defeat the couple upstairs.\lThey will gift you STRENGTH in return.\pManaging different abilities among all PokÃ©mon will be the key to success."), MSGBOX_AUTOCLOSE)
                                clearflag(FLAG_P01_GIVE_ADVICE)
                            }
                        }
                    }
                }
            }
            //second battle won
            if (defeated(TRAINER_NHM_DOUBLE) && !defeated(TRAINER_NHM_HAIL)) {
                if (!flag(FLAG_NHML2_RIDDLE_SOLVED)) {
                    //seventh hint again: fossil riddle
                    if (flag(FLAG_NHML1_WALLPAPER_GUY)) {
                        if (!flag(FLAG_HINT07)) {
                            setflag(FLAG_HINT07)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("You spoke to the gentleman talking about the wallpapers here, haven't you?\pYou should think about how and where you can take a specific look at WALLPAPERS."), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                }
                elif (!flag(FLAG_NHML1_BOULDER_FELL_DOWN)) {
                    //tenth hint: push boulder
                    if (!flag(FLAG_HINT10)) {
                        setflag(FLAG_HINT10)
                        setflag(FLAG_P01_ADDTIME)
                    }
                    msgbox(format("Oh you still can't find the right passage through the ice maze in the first floor?\pYou will have to push the boulder through the hole to open the right path."), MSGBOX_AUTOCLOSE)
                    clearflag(FLAG_P01_GIVE_ADVICE)
                }
                else {
                    //sixteenth hint: moveset Munchlax
                    setorcopyvar(VAR_NHML1_COUNT, 0)
                    checkpartymove(MOVE_BELLY_DRUM)
                    if (var(VAR_RESULT) == PARTY_SIZE) {
                        addvar(VAR_NHML1_COUNT, 1)
                    }
                    checkpartymove(MOVE_COVET)
                    if (var(VAR_RESULT) == PARTY_SIZE) {
                        addvar(VAR_NHML1_COUNT, 1)
                    }
                    checkpartymove(MOVE_FLING)
                    if (var(VAR_RESULT) == PARTY_SIZE) {
                        addvar(VAR_NHML1_COUNT, 1)
                    }
                    if (var(VAR_NHML1_COUNT) > 0) {
                        if (!flag(FLAG_HINT16)) {
                            setflag(FLAG_HINT16)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("Oh no, your Munchlax forgot an important move.\pLet me update its moveset so you can continue your journey..."), MSGBOX_AUTOCLOSE)
                        waitmessage
                        getpartymonslot(SPECIES_MUNCHLAX)
                        switch (var(VAR_RESULT)) {
                            case 0:
                                setmonmove(0, 0, MOVE_ICY_WIND)
                                setmonmove(0, 1, MOVE_BELLY_DRUM)
                                setmonmove(0, 2, MOVE_COVET)
                                setmonmove(0, 3, MOVE_FLING)
                            case 1:
                                setmonmove(1, 0, MOVE_ICY_WIND)
                                setmonmove(1, 1, MOVE_BELLY_DRUM)
                                setmonmove(1, 2, MOVE_COVET)
                                setmonmove(1, 3, MOVE_FLING)
                            case 2:
                                setmonmove(2, 0, MOVE_ICY_WIND)
                                setmonmove(2, 1, MOVE_BELLY_DRUM)
                                setmonmove(2, 2, MOVE_COVET)
                                setmonmove(2, 3, MOVE_FLING)
                            case 3:
                                setmonmove(3, 0, MOVE_ICY_WIND)
                                setmonmove(3, 1, MOVE_BELLY_DRUM)
                                setmonmove(3, 2, MOVE_COVET)
                                setmonmove(3, 3, MOVE_FLING)
                        }
                        
                        msgbox(format("Munchlax' moveset has been updated."), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                    else {
                        //eleventh hint: third battle
                        if (!flag(FLAG_HINT11)) {
                            setflag(FLAG_HINT11)
                            setflag(FLAG_P01_ADDTIME)
                        }
                        msgbox(format("Have you noticed the papers on the counter?\pAnd have you considered that by always moving last Skitty could copycat your own team mates?\p...so many questions..."), MSGBOX_AUTOCLOSE)
                        clearflag(FLAG_P01_GIVE_ADVICE)
                    }
                }
            }
        }
    }
    else {
        msgbox(format("Come back whenever you need me."), MSGBOX_AUTOCLOSE)
        waitmessage
        release
        end
    }
    waitmessage

    //add x min to play clock
    if (flag(FLAG_P01_ADDTIME)) {
        setorcopyvar(VAR_0x8004, 20)
        special(PlayTimeAddMin)
    }
    else {
        //default message for missing branches
        if (flag(FLAG_P01_GIVE_ADVICE) == TRUE) {
            msgbox(format("I am sorry, but I currently have no hints to give to you. \pTry proceeding by looking for items, catching PokÃ©mon, talking to NPCs and winning battles. \pOf course, you won't be charged 20 minutes this time."))
            waitmessage
        }
        else {
            msgbox(format("\p...\pI had already given this hint to you before. \pI guess it's fair if I don't charge you any more time for it."))
            waitmessage
        }
    }

    release
    end
}

script NHML2_Boulder {
    call(EventScript_StrengthBoulder)
    end
}

script NHML2_Sign_wiz1989 {
    lock
    msgbox(format("This ROM hack was designed and created by WIZ1989."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHML2_Sign_tileset {
    lock
    msgbox(format("This Fossil Museum tileset was originally designed and created by princess-phoenix and adapted to fit gba style."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHML2_Sign_hole {
    lock
    msgbox("A hole in the ground. \lMaybe you can push something through \nit.", MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHML2_Boulder_in_hole {
    lock
    removeobject(3, MAP_NATIONAL_HISTORY_MUSEUM_L2)
    setvar(VAR_0x8004, 1)  //vertical pan
    setvar(VAR_0x8005, 1)  //horizontal pan
    setvar(VAR_0x8006, 4)  //num shakes
    setvar(VAR_0x8007, 5)  //shake delay
    special(ShakeCamera)
    waitstate
    applymovement(OBJ_EVENT_ID_PLAYER, Move_exclmark)
    waitmovement(0)
    msgbox(format("The boulder fell through the hole!"), MSGBOX_AUTOCLOSE)
    waitmessage
    //reset var to deactivate the frame table event
    setorcopyvar(VAR_NHML1_BOULDER_FELL_DOWN, 0)
    release
    end
}

script NHM2_Sign_Archen {
    lock
    msgbox(format("This showcase contains an ancient PLUME FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage
    release
    end
}

script NHM2_Sign_Kabutops {
    lock
    msgbox(format("This showcase contains an ancient DOME FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage    
    release
    end
}

script NHM2_Sign_Omastar {
    lock
    msgbox(format("This showcase contains an ancient HELIX FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Aerodactyl {
    lock
    msgbox(format("This showcase contains an ancient OLD AMBER."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Cradily {
    lock
    msgbox(format("This showcase contains an ancient ROOT FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Armaldo {
    lock
    msgbox(format("This showcase contains an ancient CLAW FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Rampardos {
    lock
    msgbox(format("This showcase contains an ancient SKULL FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Bastiodon {
    lock
    msgbox(format("This showcase contains an ancient ARMOR FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Carracosta {
    lock
    msgbox(format("This showcase contains an ancient COVER FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHM2_Sign_Aurorus {
    lock
    msgbox(format("This showcase contains an ancient SAIL FOSSIL."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHML2_Sign_Skeleton_Tyrantrum {
    lock
    msgbox(format("An impressive Tyrantrum skeleton."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHML2_Sign_Skeleton_Armaldo {
    lock
    msgbox(format("A skeleton of an Armaldo."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHML2_Sign_Skeleton_Kabuto {
    lock
    msgbox(format("It's a big rock with Kabuto fossils attached to it."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHML2_Sign_Skeleton_Omanyte {
    lock
    msgbox(format("It's a big rock with Omanyte fossils attached to it."), MSGBOX_AUTOCLOSE)
    waitmessage 
    release
    end
}

script NHML2_Item_HeartScale {
    lock
	finditem(ITEM_HEART_SCALE, 2)
	release
	end
}

script NHML2_Sign_Bastiodon_skull {
    lock
    if (!flag(FLAG_NHML2_BASTIODON_SKULL) && !flag(FLAG_CAUGHT_ARCHEN)) {
        msgbox(format("There's a tiny note sticking in the Bastiodon skull.\pBut you are NOT ALLOWED TO TOUCH THE EXHIBITS!"), MSGBOX_AUTOCLOSE)
        waitmessage
        msgbox(format("Do you still want to take it out and read it?"), MSGBOX_YESNO)
        if (var(VAR_RESULT) == YES) {
            setflag(FLAG_NHML2_BASTIODON_SKULL)
            msgbox(format("What an outlaw you are!"), MSGBOX_AUTOCLOSE)
            waitmessage
            setvar(VAR_0x8006, ITEM_PRETTY_FEATHER)
	        showitemdesc
            msgbox(format("The note shows a little picture of a feather."))
            waitmessage
            hideitemdesc
        }
        else {
            msgbox(format("You left the note where it was."), MSGBOX_AUTOCLOSE)
            waitmessage
        }
    }
    else {
        msgbox(format("It's a Bastiodon skull. \lWhat did you expect?"), MSGBOX_AUTOCLOSE)
        waitmessage
    }
    release
    end
}


// ############### movements ###############

movement Move_exclmark {
	emote_exclamation_mark
}

movement Move_back {
    face_right
    walk_right
    face_left
}


// ############### texts ###############

text Text_NotEnoughMons {
	format("You don't have enough PokÃ©mon to fight us.")
}
